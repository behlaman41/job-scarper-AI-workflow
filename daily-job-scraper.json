{
  "name": "Daily Job Scraper Workflow",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 9 * * *"
            }
          ]
        }
      },
      "id": "cron-trigger",
      "name": "Daily Trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [240, 300],
      "notes": "Triggers daily at 9:00 AM IST"
    },
    {
      "parameters": {
        "functionCode": "// Job Scraper Workflow - Main Orchestration\n\nconst axios = require('axios');\nconst moment = require('moment-timezone');\n\n// Configuration\nconst SCRAPER_API_URL = 'http://playwright-scraper:3000';\nconst TIMEZONE = 'Asia/Kolkata';\n\n// Set timezone for logging\nconst now = moment().tz(TIMEZONE);\nconsole.log(`üöÄ Starting daily job scraper workflow at ${now.format('YYYY-MM-DD HH:mm:ss')} IST`);\n\ntry {\n  // Step 1: Health check\n  console.log('üìã Step 1: Checking scraper service health...');\n  const healthResponse = await axios.get(`${SCRAPER_API_URL}/health`, {\n    timeout: 10000\n  });\n  \n  if (healthResponse.data.status !== 'healthy') {\n    throw new Error('Scraper service is not healthy');\n  }\n  \n  console.log('‚úÖ Scraper service is healthy');\n  \n  // Step 2: Run complete workflow (scrape + analyze + email)\n  console.log('üîÑ Step 2: Running complete job workflow...');\n  \n  const workflowResponse = await axios.post(`${SCRAPER_API_URL}/api/workflow`, {}, {\n    timeout: 300000, // 5 minutes timeout\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  \n  const result = workflowResponse.data;\n  \n  if (!result.success) {\n    throw new Error(`Workflow failed: ${result.error}`);\n  }\n  \n  console.log('‚úÖ Workflow completed successfully');\n  console.log(`üìä Summary: ${result.summary.jobs_scraped} scraped, ${result.summary.relevant_jobs} relevant`);\n  \n  // Return success result for n8n\n  return [{\n    json: {\n      success: true,\n      workflow_id: 'daily-job-scraper',\n      execution_time: now.format('YYYY-MM-DD HH:mm:ss'),\n      summary: result.summary,\n      message: 'Daily job scraping completed successfully',\n      next_run: moment().tz(TIMEZONE).add(1, 'day').hour(9).minute(0).second(0).format('YYYY-MM-DD HH:mm:ss')\n    }\n  }];\n  \n} catch (error) {\n  console.error('‚ùå Workflow failed:', error.message);\n  \n  // Return error result for n8n\n  return [{\n    json: {\n      success: false,\n      workflow_id: 'daily-job-scraper',\n      execution_time: now.format('YYYY-MM-DD HH:mm:ss'),\n      error: error.message,\n      error_details: {\n        name: error.name,\n        stack: error.stack,\n        response_data: error.response?.data\n      },\n      message: 'Daily job scraping failed'\n    }\n  }];\n}"
      },
      "id": "workflow-executor",
      "name": "Execute Workflow",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300],
      "notes": "Orchestrates the complete job scraping workflow"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.success}}",
              "value2": true
            }
          ]
        }
      },
      "id": "success-check",
      "name": "Check Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [680, 300],
      "notes": "Routes based on workflow success/failure"
    },
    {
      "parameters": {
        "functionCode": "// Success Notification Handler\n\nconst moment = require('moment-timezone');\nconst data = $input.all()[0].json;\n\nconsole.log('‚úÖ Workflow completed successfully');\nconsole.log('üìä Summary:', JSON.stringify(data.summary, null, 2));\n\n// Log success metrics\nconst metrics = {\n  timestamp: data.execution_time,\n  jobs_scraped: data.summary?.jobs_scraped || 0,\n  jobs_analyzed: data.summary?.jobs_analyzed || 0,\n  relevant_jobs: data.summary?.relevant_jobs || 0,\n  average_score: data.summary?.average_score || 0,\n  next_run: data.next_run\n};\n\nconsole.log('üìà Metrics:', JSON.stringify(metrics, null, 2));\n\n// Return formatted success data\nreturn [{\n  json: {\n    status: 'SUCCESS',\n    message: `Daily job scraping completed! Found ${metrics.relevant_jobs} relevant jobs out of ${metrics.jobs_scraped} total.`,\n    metrics: metrics,\n    timestamp: data.execution_time\n  }\n}];"
      },
      "id": "success-handler",
      "name": "Success Handler",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 200],
      "notes": "Handles successful workflow completion"
    },
    {
      "parameters": {
        "functionCode": "// Error Notification Handler\n\nconst moment = require('moment-timezone');\nconst data = $input.all()[0].json;\n\nconsole.error('‚ùå Workflow failed');\nconsole.error('üîç Error:', data.error);\nconsole.error('üìã Details:', JSON.stringify(data.error_details, null, 2));\n\n// Log error for monitoring\nconst errorLog = {\n  timestamp: data.execution_time,\n  workflow_id: data.workflow_id,\n  error_message: data.error,\n  error_type: data.error_details?.name || 'Unknown',\n  response_status: data.error_details?.response_data?.status || 'N/A'\n};\n\nconsole.error('üìä Error Log:', JSON.stringify(errorLog, null, 2));\n\n// You could add additional error handling here:\n// - Send alert emails\n// - Post to Slack/Discord\n// - Write to monitoring systems\n// - Retry logic\n\n// Return formatted error data\nreturn [{\n  json: {\n    status: 'ERROR',\n    message: `Daily job scraping failed: ${data.error}`,\n    error_log: errorLog,\n    timestamp: data.execution_time,\n    retry_suggestion: 'Check scraper service logs and Ollama availability'\n  }\n}];\n\n// Optional: Implement retry logic\n// if (errorLog.error_type === 'ECONNREFUSED') {\n//   console.log('üîÑ Connection refused, will retry in next scheduled run');\n// }"
      },
      "id": "error-handler",
      "name": "Error Handler",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 400],
      "notes": "Handles workflow errors and failures"
    }
  ],
  "connections": {
    "Daily Trigger": {
      "main": [
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "Check Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Success": {
      "main": [
        [
          {
            "node": "Success Handler",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "timezone": "Asia/Kolkata",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "daily-job-scraper",
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "job-automation",
      "name": "Job Automation"
    }
  ]
}
