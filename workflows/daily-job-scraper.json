{
  "name": "Manual Job Scraper Workflow",
  "nodes": [
    {
      "parameters": {},
      "id": "manual-trigger",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 300],
      "notes": "Manual execution trigger"
    },
    {
      "parameters": {
        "url": "http://host.docker.internal:3000/health",
        "options": {
          "timeout": 10000
        }
      },
      "id": "health-check",
      "name": "Health Check",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [460, 300],
      "notes": "Check scraper service health"
    },
    {
      "parameters": {
        "url": "http://host.docker.internal:3000/api/workflow",
        "method": "POST",
        "options": {
          "timeout": 300000
        },
        "headers": {
          "Content-Type": "application/json"
        }
      },
      "id": "workflow-executor",
      "name": "Execute Workflow",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [680, 300],
      "notes": "Execute the complete job scraping workflow"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.success}}",
              "value2": true
            }
          ]
        }
      },
      "id": "success-check",
      "name": "Check Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [900, 300],
      "notes": "Routes based on workflow success/failure"
    },
    {
      "parameters": {
        "functionCode": "// Success Handler\nconst data = $input.first().json;\nconst now = new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' });\n\nconsole.log('‚úÖ Workflow completed successfully at', now);\nconsole.log('üìä Summary:', JSON.stringify(data.summary, null, 2));\n\nreturn [{\n  json: {\n    status: 'SUCCESS',\n    message: `Job scraping completed! Found ${data.summary?.relevant_jobs || 0} relevant jobs out of ${data.summary?.jobs_scraped || 0} total.`,\n    summary: data.summary,\n    timestamp: now\n  }\n}];"
      },
      "id": "success-handler",
      "name": "Success Handler",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1120, 200],
      "notes": "Handles successful workflow completion"
    },
    {
      "parameters": {
        "functionCode": "// Error Handler\nconst data = $input.first().json;\nconst now = new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' });\n\nconsole.error('‚ùå Workflow failed at', now);\nconsole.error('üîç Error:', data.error || 'Unknown error');\n\nreturn [{\n  json: {\n    status: 'ERROR',\n    message: `Job scraping failed: ${data.error || 'Unknown error'}`,\n    error: data.error,\n    timestamp: now\n  }\n}];"
      },
      "id": "error-handler",
      "name": "Error Handler",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1120, 400],
      "notes": "Handles workflow errors and failures"
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Health Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Health Check": {
      "main": [
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "Check Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Success": {
      "main": [
        [
          {
            "node": "Success Handler",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-01-13T08:00:00.000Z",
  "versionId": "1"
}